x-airflow-env: &airflow_env
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.Fa>
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres>
  AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"

  # Create the first admin user during init
  _AIRFLOW_WWW_USER_CREATE: ${_AIRFLOW_WWW_USER_CREATE}
  _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
  _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
  _AIRFLOW_WWW_USER_FIRSTNAME: ${_AIRFLOW_WWW_USER_FIRSTNAME}
  _AIRFLOW_WWW_USER_LASTNAME: ${_AIRFLOW_WWW_USER_LASTNAME}
  _AIRFLOW_WWW_USER_EMAIL: ${_AIRFLOW_WWW_USER_EMAIL}

services:
  postgres:
    image: postgres:13
    container_name: pg13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:latest
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "6379:6379"

  airflow-init:
    build: .
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: *airflow_env
      AIRFLOW_UID: "${AIRFLOW_UID}"
    command: >
      bash -lc '
        set -e
        airflow db migrate &&
        airflow users create \
          --role Admin \
          --username "$_AIRFLOW_WWW_USER_USERNAME" \
          --password "$_AIRFLOW_WWW_USER_PASSWORD" \
          --firstname "$_AIRFLOW_WWW_USER_FIRSTNAME" \
          --lastname "$_AIRFLOW_WWW_USER_LASTNAME" \
          --email "$_AIRFLOW_WWW_USER_EMAIL" || true
      '
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins

  airflow-webserver:
    build: .
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow_env
      AIRFLOW_UID: "${AIRFLOW_UID}"
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

  airflow-scheduler:
    build: .
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_started
    environment:
      <<: *airflow_env
      AIRFLOW_UID: "${AIRFLOW_UID}"
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

  airflow-worker:
    build: .
    container_name: airflow-worker
    depends_on:
      airflow-scheduler:
        condition: service_started
    environment:
      <<: *airflow_env
      AIRFLOW_UID: "${AIRFLOW_UID}"
    command: celery worker
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

  flower:
    build: .
    container_name: airflow-flower
    depends_on:
      airflow-worker:
        condition: service_started
    environment:
      <<: *airflow_env
      AIRFLOW_UID: "${AIRFLOW_UID}"
    command: celery flower
    ports:
      - "5555:5555"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

volumes:
  pg_data: